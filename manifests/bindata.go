// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/infra-machineconfigpool.yaml (315B)
// assets/namespace.yaml (264B)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsInfraMachineconfigpoolYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x4b\xc4\x40\x10\x85\xfb\xfd\x15\xc3\xd5\xb9\x88\xed\xb6\x62\x21\x28\x08\x82\x8d\x58\xcc\x6d\x5e\xcc\x92\xcd\xcc\x32\xbb\x39\x15\xf1\xbf\xcb\x26\x20\x16\x16\xd7\xce\x7b\xf3\xbd\x8f\x73\x7c\x86\x95\xa8\xe2\x69\xe1\x30\x45\x41\x50\x19\xe3\xdb\x6a\x5c\xa3\x4a\xaf\x19\x52\xa6\x38\xd6\x3e\xea\xd5\xf9\xda\xcd\x51\x06\x4f\x0f\x7b\xf5\x66\xab\x3e\xaa\x26\xb7\xa0\xf2\xc0\x95\xbd\x23\x12\x5e\xe0\x29\xca\x68\xec\x4a\x46\x68\xb7\xe5\xef\xc7\x13\x12\x42\x55\x6b\x41\x8b\x6a\x98\x6e\x3f\xb2\xa1\x34\x91\xb2\x5f\x89\x8e\xf4\x35\xe3\xf3\x12\x2f\xd3\x84\x8e\x34\xc3\xb8\x51\xe9\x4e\x3a\x3a\x73\x5a\x51\x3c\xbd\xbc\xab\xcd\xb0\x6e\xd3\x79\xfd\x6e\x7a\x3a\xe0\x1f\x83\x7b\x3e\x21\xfd\x8e\xb7\xd2\xb1\x71\xfb\x79\x3d\xc1\x04\x15\xa5\x4d\x6d\x18\x4f\x87\x83\xfb\x09\x00\x00\xff\xff\x10\x26\x3c\xf1\x3b\x01\x00\x00")

func assetsInfraMachineconfigpoolYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsInfraMachineconfigpoolYaml,
		"assets/infra-machineconfigpool.yaml",
	)
}

func assetsInfraMachineconfigpoolYaml() (*asset, error) {
	bytes, err := assetsInfraMachineconfigpoolYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/infra-machineconfigpool.yaml", size: 315, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf0, 0x71, 0xf4, 0x1f, 0xce, 0x4d, 0xfe, 0x19, 0x5d, 0x1f, 0xf3, 0xe4, 0xf8, 0x54, 0x80, 0xd4, 0x4a, 0x7b, 0x4, 0xd8, 0xd4, 0x81, 0x7b, 0x83, 0xf9, 0x26, 0x95, 0x97, 0x5d, 0x5, 0xa3, 0x37}}
	return a, nil
}

var _assetsNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcf\xc1\x4a\x04\x41\x0c\x04\xd0\x7b\x7f\x45\x31\x9e\x47\xf1\xda\xff\xa0\x17\xc1\x7b\xb6\xa7\xd6\x89\xdb\x93\x0c\xe9\xcc\xfa\xfb\xa2\x2b\x28\x78\x0c\x81\x57\x55\x17\xb5\xa5\xe2\x59\x36\x8e\x5d\x1a\x8b\xec\xfa\xca\x18\xea\x56\x71\x7d\x2c\x1b\x53\x16\x49\xa9\x05\x10\x33\x4f\x49\x75\x1b\x5f\x27\xe0\x3b\x6d\xac\x7a\xce\x7b\xf5\x07\xf3\x85\xf3\x60\x67\x4b\x8f\x8a\x69\x2a\x80\xc9\xc6\x0a\xb5\x73\xc8\x3c\xda\xca\xe5\xe8\x8c\xd9\x77\x86\xa4\x47\x01\xba\x9c\xd8\x7f\xb4\x3b\x48\xef\xfe\xf1\xab\xce\x9b\x9b\xa6\x87\xda\x1b\xd2\xd1\xdd\x2f\x38\x7b\xe0\x85\x71\xd5\xc6\xa7\xdb\x17\x7e\x7a\x67\xcb\x01\x35\xe4\xaa\xe3\x3b\xf4\xb6\xe5\x5f\xc7\xd6\x8f\x91\x8c\x3f\x70\xc5\x94\x71\x70\x2a\x9f\x01\x00\x00\xff\xff\xce\x49\x3a\xc2\x08\x01\x00\x00")

func assetsNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsNamespaceYaml,
		"assets/namespace.yaml",
	)
}

func assetsNamespaceYaml() (*asset, error) {
	bytes, err := assetsNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/namespace.yaml", size: 264, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6, 0x1b, 0x14, 0x77, 0x80, 0x39, 0xa, 0x63, 0xd5, 0xa7, 0x42, 0x32, 0xc9, 0x94, 0xa5, 0xdc, 0xfb, 0x2d, 0xec, 0x1c, 0x94, 0xf9, 0xdf, 0xe5, 0x49, 0x85, 0x34, 0x32, 0x9d, 0x86, 0xf, 0x84}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/infra-machineconfigpool.yaml": assetsInfraMachineconfigpoolYaml,
	"assets/namespace.yaml":               assetsNamespaceYaml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": {nil, map[string]*bintree{
		"infra-machineconfigpool.yaml": {assetsInfraMachineconfigpoolYaml, map[string]*bintree{}},
		"namespace.yaml":               {assetsNamespaceYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
